import time
import os
import sys
import sqlite3
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from helpers import report_energy, pay_energy, reset_energy

load_dotenv()

ADDRESS = os.getenv("A_ADDRESS")
PRIVATE_KEY = os.getenv("A_PK")
ROLE = "SELL_ONLY"

DB_PATH = "energy_A.db"

# ‚úÖ scale factor ‡πÄ‡∏Å‡πá‡∏ö 3 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
SCALE = 1000

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS energy_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            total_generated REAL,
            total_consumed REAL,
            delta_generated REAL,
            delta_consumed REAL,
            ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

# ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å DB
def get_last_total():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT total_generated, total_consumed FROM energy_log ORDER BY id DESC LIMIT 1")
    row = cur.fetchone()
    conn.close()
    if row:
        return row[0], row[1]
    return 0.000, 0.000  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡∏ñ‡πâ‡∏≤ DB ‡∏ß‡πà‡∏≤‡∏á

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á DB
def save_energy(total_gen, total_con, delta_gen, delta_con):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO energy_log (total_generated, total_consumed, delta_generated, delta_consumed)
        VALUES (?, ?, ?, ?)
    """, (total_gen, total_con, delta_gen, delta_con))
    conn.commit()
    conn.close()

# üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
init_db()

try:
    while True:
        last_gen, last_con = get_last_total()

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏ó‡∏µ‡∏•‡∏∞ 0.001 ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        new_gen = round(last_gen + 0.002, 3)
        new_con = last_con  # ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏ü

        delta_gen = round(new_gen - last_gen, 3)
        delta_con = 0.000

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB (‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á total ‡πÅ‡∏•‡∏∞ delta)
        save_energy(new_gen, new_con, delta_gen, delta_con)

        net = new_gen - new_con  # ‚úÖ ‡πÉ‡∏ä‡πâ total ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ log
        print(f"\nüè† House A ‚Üí ‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° {new_gen:.3f}, ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏° {new_con:.3f} = Net {net:.3f} kWh")

        # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ delta ‡πÄ‡∏Ç‡πâ‡∏≤ contract
        gen_int = int(delta_gen * SCALE)
        con_int = int(delta_con * SCALE)

        report_energy(ADDRESS, PRIVATE_KEY, gen_int, con_int)

        if net < 0:
            pay_energy(ADDRESS, PRIVATE_KEY, int(abs(net) * SCALE))

        time.sleep(300)  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ

except KeyboardInterrupt:
    print("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚Üí resetEnergy()")
    reset_energy(ADDRESS, PRIVATE_KEY)
